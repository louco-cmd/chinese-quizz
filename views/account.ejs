<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>加油！my account</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css" rel="stylesheet">
  <style>
    :root {
      --surface: #ffffff;
      --surface-1: #f8f9fa;
      --surface-2: #e9ecef;
      --primary: #0d6efd;
      --primary-container: #e3f2fd;
      --on-primary: #ffffff;
      --text: #202124;
      --text-secondary: #5f6368;
      --border: #dadce0;
    }

    body {
      background-color: var(--surface-1);
      color: var(--text);
      font-family: 'Segoe UI', system-ui, sans-serif;
      padding-bottom: 80px;
    }

    .card {
      border: none;
      border-radius: 12px;
      box-shadow: 0 1px 2px rgba(0,0,0,0.1), 0 1px 3px rgba(0,0,0,0.05);
      transition: box-shadow 0.2s ease;
    }

    .card:hover {
      box-shadow: 0 2px 6px rgba(0,0,0,0.1), 0 4px 12px rgba(0,0,0,0.05);
    }

    .btn {
      border-radius: 8px;
      font-weight: 500;
    }

    .btn-primary {
      background: var(--primary);
      border: none;
    }

    .avatar {
      width: 32px;
      height: 32px;
      background: var(--primary-container);
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      color: var(--primary);
    }

    .badge {
      border-radius: 6px;
      font-weight: 500;
    }

    .text-muted {
      color: var(--text-secondary) !important;
    }

    /* Ordre mobile */
    .mobile-order-1 {
      order: 1;
    }

    .mobile-order-2 {
      order: 2;
    }

    @media (min-width: 992px) {
      .mobile-order-1 {
        order: 0;
      }

      .mobile-order-2 {
        order: 0;
      }
    }

    /* Contributions */
    .contributions-fullwidth {
      width: 100%;
      background: var(--surface-1);
      border-bottom: 1px solid var(--border);
      padding: 1rem 0;
      margin: 0;
    }

    .contributions-wrapper {
      width: 100%;
      max-width: 100%;
      padding: 0 1rem;
    }

    .contributions-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(12px, 1fr));
      grid-auto-rows: 12px;
      gap: 2px;
      margin: 0 auto;
      width: 100%;
      max-width: 900px;
    }

    .contribution-day {
      width: 100%;
      height: 100%;
      aspect-ratio: 1;
      border-radius: 2px;
      background-color: var(--surface-2);
      cursor: pointer;
      position: relative;
      border: 1px solid rgba(0,0,0,0.05);
      transition: all 0.2s ease;
      min-width: 10px;
      min-height: 10px;
    }

    .contribution-day:hover {
      transform: scale(1.2);
      z-index: 10;
    }

    .contribution-day:hover::after {
      content: attr(data-count) " quiz le " attr(data-date);
      position: absolute;
      bottom: 100%;
      left: 50%;
      transform: translateX(-50%);
      background: var(--text);
      color: var(--surface);
      padding: 0.5rem 1rem;
      border-radius: 0.5rem;
      font-size: 0.875rem;
      white-space: nowrap;
      z-index: 1000;
    }

    /* Niveaux de couleur */
    .level-0 { background-color: var(--surface-1); }
    .level-1 { background-color: #cfe2ff; }
    .level-2 { background-color: #6ea8fe; }
    .level-3 { background-color: #3d8bfd; }
    .level-4 { background-color: var(--primary); }

    .contributions-legend {
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 8px;
      margin-top: 0.5rem;
      font-size: 11px;
      color: var(--text-secondary);
    }

    .color-scale {
      display: flex;
      gap: 2px;
    }

    .color-level {
      width: 10px;
      height: 10px;
      border-radius: 1px;
    }

    /* Mobile optimisations */
    @media (max-width: 768px) {
      .contributions-wrapper {
        padding: 0 0.5rem;
      }
      
      .contributions-grid {
        grid-auto-rows: 10px;
        gap: 1px;
      }
      
      .contribution-day {
        min-width: 8px;
        min-height: 8px;
      }
    }

    @media (max-width: 480px) {
      .contributions-grid {
        grid-auto-rows: 8px;
      }
      
      .contribution-day {
        min-width: 6px;
        min-height: 6px;
      }
    }
  </style>
</head>
<body>
  <!-- Header -->
  <div class="d-flex justify-content-between align-items-center bg-primary text-white p-3">
    <span class="fs-3 fw-bold user-select-all" style="cursor: pointer;" onclick="window.location='/dashboard'">
      加油！
    </span>
  </div>

  <%- include('partials/navbar', {currentPage: 'account'}) %>
  <%- include('partials/installation') %>

  <!-- Contributions -->
  <section class="contributions-fullwidth">
    <div class="container-fluid px-0">
      <div class="contributions-wrapper">
        <div class="d-flex justify-content-between align-items-center mb-2">
          <h6 class="mb-0 d-flex align-items-center">
            <i class="bi bi-calendar3 me-2"></i>Contributions
          </h6>
          <small class="text-muted" id="contributions-total">0 quiz</small>
        </div>
        
        <div class="contributions-grid" id="contributionsGrid">
          <div class="text-center text-muted py-3">
            <div class="spinner-border spinner-border-sm" role="status"></div>
            <span class="ms-2">Chargement...</span>
          </div>
        </div>

        <div class="contributions-legend">
          <span>Moins</span>
          <div class="color-scale">
            <div class="color-level level-0"></div>
            <div class="color-level level-1"></div>
            <div class="color-level level-2"></div>
            <div class="color-level level-3"></div>
            <div class="color-level level-4"></div>
          </div>
          <span>Plus</span>
        </div>
      </div>
    </div>
  </section>

  <!-- Main Content -->
  <section class="container my-4">
    <div class="row g-4">
      <!-- Colonne Actions (PREMIERE sur mobile) -->
      <div class="col-12 col-lg-4 mobile-order-1">
        <!-- Duels en Attente - Section conditionnelle -->
        <div id="pending-duels-section" style="display: none;">
          <div class="card">
            <div class="card-header">
              <h6 class="mb-0 d-flex align-items-center">
                <i class="bi bi-sword me-2"></i>
                Duels en attente
              </h6>
            </div>
            <div class="card-body">
              <div id="pending-duels-account">
                <div class="text-center py-3">
                  <div class="spinner-border spinner-border-sm" role="status"></div>
                  <p class="mt-2 text-muted small">Chargement...</p>
                </div>
              </div>
            </div>
          </div>
        </div>

            <!-- Info utilisateur -->
        <div class="card mt-4">
          <div class="card-body">
            <div class="row align-items-center">
              <div class="col-auto">
                <div class="avatar" style="width: 48px; height: 48px;">
                  <i class="bi bi-person-fill"></i>
                </div>
              </div>
              <div class="col">
                <div class="d-flex align-items-center">
                  <h6 id="userName" class="card-title mb-1 fw-bold text-truncate me-2"></h6>
                  <button class="btn btn-sm btn-outline-primary" onclick="enableNameEdit()">
                    <i class="bi bi-pencil"></i>
                  </button>
                </div>
                <p class="card-text text-muted mb-0 small">
                  <i class="bi bi-journal-text me-1"></i>
                  <span id="wordCountNumber">0</span> mots
                </p>
              </div>
            </div>
            
            <!-- Formulaire d'édition (caché par défaut) -->
            <div id="nameEditForm" class="mt-3" style="display: none;">
              <div class="input-group input-group-sm">
                <input type="text" id="nameInput" class="form-control" placeholder="Nouveau prénom">
                <button class="btn btn-success" type="button" onclick="saveName()">
                  <i class="bi bi-check"></i>
                </button>
                <button class="btn btn-secondary" type="button" onclick="cancelNameEdit()">
                  <i class="bi bi-x"></i>
                </button>
              </div>
              <div class="form-text">Maximum 50 caractères</div>
            </div>
          </div>
        </div>

        <!-- Performance -->
        <div class="card mt-4">
          <div class="card-header">
            <h6 class="mb-0 d-flex align-items-center">
              <i class="bi bi-graph-up me-2"></i>
              Performance
            </h6>
          </div>
          <div class="card-body">
            <div id="quiz-stats">
              <div class="text-center py-2">
                <div class="spinner-border spinner-border-sm" role="status"></div>
                <span class="ms-2">Chargement...</span>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Colonne Données (DEUXIEME sur mobile) -->
      <div class="col-12 col-lg-8 mobile-order-2">
        <!-- Statistiques des mots -->
        <div class="card">
          <div class="card-header">
            <h6 class="mb-0 d-flex align-items-center">
              <i class="bi bi-bar-chart me-2"></i>
              Statistiques des mots
            </h6>
          </div>
          <div class="card-body">
            <ul id="hskStats" class="list-group list-group-flush"></ul>
          </div>
        </div>

        <!-- Derniers Quiz -->
        <div class="card mt-4">
          <div class="card-header">
            <h6 class="mb-0 d-flex align-items-center">
              <i class="bi bi-clock me-2"></i>
              Derniers quiz
            </h6>
          </div>
          <div class="card-body">
            <div id="recent-quizzes">
              <div class="text-center text-muted py-3">
                <div class="spinner-border spinner-border-sm" role="status"></div>
                <span class="ms-2">Chargement...</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    // Initialisation
    document.addEventListener('DOMContentLoaded', function() {
      loadUserData();
      loadQuizStats();
      loadContributionsGrid();
      loadPendingDuels('pending-duels-account');
    });

    // Données utilisateur
    async function loadUserData() {
      try {
        const res = await fetch('/account-info'); 
        if (!res.ok) throw new Error(`HTTP Error: ${res.status}`);
        
        const data = await res.json(); 
        
        document.getElementById('userName').textContent = data.name;
        document.getElementById('wordCountNumber').textContent = data.wordCount;

        const hskStatsElement = document.getElementById('hskStats');
        hskStatsElement.innerHTML = '';
        
        for(const level in data.stats) {
          const li = document.createElement('li');
          li.className = 'list-group-item d-flex justify-content-between align-items-center py-2';
          li.textContent = level;
          
          const badge = document.createElement('span');
          const badgeClass = level === 'Street' ? 'bg-success' : 'bg-primary'; 
          badge.className = `badge ${badgeClass}`;
          badge.textContent = data.stats[level];
          
          li.appendChild(badge);
          hskStatsElement.appendChild(li);
        }

      } catch (err) {
        console.error('Erreur chargement données:', err);
        document.getElementById('wordCountNumber').textContent = '0';
      }
    }

    // Stats quiz
    async function loadQuizStats() {
      try {
        const response = await fetch('/api/quiz/history?limit=5');
        
        if (!response.ok) throw new Error(`HTTP error: ${response.status}`);
        
        const data = await response.json();
        
        if (!data.quizzes || data.quizzes.length === 0) {
          displayNoQuizData();
        } else {
          displayQuizStats(data);
        }
        
      } catch (error) {
        console.error('Erreur stats quiz:', error);
        displayQuizStatsError();
      }
    }

    function displayNoQuizData() {
      const statsContainer = document.getElementById('quiz-stats');
      const recentQuizzes = document.getElementById('recent-quizzes');
      
      statsContainer.innerHTML = `
        <div class="text-center text-muted py-3">
          <i class="bi bi-graph-up fs-2 opacity-50"></i>
          <div class="small mt-2">Aucune statistique</div>
          <a href="/quiz-pinyin" class="btn btn-outline-primary btn-sm mt-2">Commencer</a>
        </div>
      `;
      
      recentQuizzes.innerHTML = `
        <div class="text-center text-muted py-3">
          <i class="bi bi-clock fs-2 opacity-50"></i>
          <div class="small mt-2">Aucun quiz récent</div>
          <a href="/quiz-pinyin" class="btn btn-outline-primary btn-sm mt-2">Premier quiz</a>
        </div>
      `;
    }

    function displayQuizStats(data) {
      const statsContainer = document.getElementById('quiz-stats');
      const recentQuizzes = document.getElementById('recent-quizzes');
      
      statsContainer.innerHTML = `
        <div class="text-center">
          <div class="h5 text-primary mb-1">${Math.round(data.stats.average_ratio || 0)}%</div>
          <div class="text-muted small">Moyenne</div>
        </div>
        <div class="row text-center mt-3">
          <div class="col-6">
            <div class="small fw-medium">${data.stats.total_quizzes}</div>
            <div class="text-muted small">Total</div>
          </div>
          <div class="col-6">
            <div class="small fw-medium">${data.stats.best_score ? Math.round(data.stats.best_score) : 0}%</div>
            <div class="text-muted small">Meilleur</div>
          </div>
        </div>
      `;
      
      recentQuizzes.innerHTML = data.quizzes.map(quiz => `
        <div class="d-flex justify-content-between align-items-center border-bottom pb-2 mb-2">
          <div>
            <span class="badge bg-${getQuizTypeColor(quiz.quiz_type)} me-2 small">
              ${quiz.quiz_type}
            </span>
            <span class="fw-medium">${quiz.score}/${quiz.total_questions}</span>
            <span class="text-${getScoreColor(quiz.ratio)} small ms-1">
              (${Math.round(quiz.ratio)}%)
            </span>
          </div>
          <small class="text-muted">
            ${new Date(quiz.date_completed).toLocaleDateString('fr-FR')}
          </small>
        </div>
      `).join('');
    }

    function displayQuizStatsError() {
      document.getElementById('quiz-stats').innerHTML = `
        <div class="alert alert-warning small">
          <i class="bi bi-exclamation-triangle me-1"></i>
          Données indisponibles
        </div>
      `;
    }

    // Contributions
    async function loadContributionsGrid() {
      try {
        const currentYear = new Date().getFullYear();
        const response = await fetch(`/api/contributions?year=${currentYear}`, {
          credentials: 'include'
        });
        
        if (!response.ok) throw new Error(`HTTP error: ${response.status}`);
        
        const data = await response.json();
        
        if (!data || data.length === 0) {
          displayNoContributions();
        } else {
          const totalQuizzes = data.reduce((sum, item) => sum + parseInt(item.count || 0), 0);
          document.getElementById('contributions-total').textContent = `${totalQuizzes} quiz`;
          generateContributionsGrid(data);
        }
        
      } catch (error) {
        console.error('Erreur contributions:', error);
        displayContributionsError();
      }
    }

    function displayNoContributions() {
      const grid = document.getElementById('contributionsGrid');
      document.getElementById('contributions-total').textContent = '0 quiz';
      
      const dates = generateCurrentYearDates();
      const today = new Date();
      const todayNormalized = new Date(today.getFullYear(), today.getMonth(), today.getDate());
      
      grid.innerHTML = '';
      
      dates.forEach(date => {
        const dateString = date.toISOString().split('T')[0];
        const dateNormalized = new Date(date.getFullYear(), date.getMonth(), date.getDate());
        const isFuture = dateNormalized > todayNormalized;
        
        const dayElement = document.createElement('div');
        
        if (isFuture) {
          dayElement.className = 'contribution-day future-day';
          dayElement.setAttribute('data-count', 0);
          dayElement.setAttribute('data-date', 'Jour futur');
        } else {
          dayElement.className = 'contribution-day level-0';
          dayElement.setAttribute('data-count', 0);
          dayElement.setAttribute('data-date', formatDate(dateString));
        }
        
        grid.appendChild(dayElement);
      });
    }

    function generateContributionsGrid(contributionsData) {
      const grid = document.getElementById('contributionsGrid');
      const contributionsMap = {};
      
      contributionsData.forEach(item => {
        contributionsMap[item.date] = parseInt(item.count);
      });

      const dates = generateCurrentYearDates();
      const today = new Date();
      const todayNormalized = new Date(today.getFullYear(), today.getMonth(), today.getDate());

      grid.innerHTML = '';

      dates.forEach(date => {
        const dateString = date.toISOString().split('T')[0];
        const dateNormalized = new Date(date.getFullYear(), date.getMonth(), date.getDate());
        const isFuture = dateNormalized > todayNormalized;
        
        const dayElement = document.createElement('div');
        
        if (isFuture) {
          dayElement.className = 'contribution-day future-day';
          dayElement.setAttribute('data-count', 0);
          dayElement.setAttribute('data-date', 'Jour futur');
        } else {
          const count = contributionsMap[dateString] || 0;
          const level = getContributionLevel(count);
          dayElement.className = `contribution-day level-${level}`;
          dayElement.setAttribute('data-count', count);
          dayElement.setAttribute('data-date', formatDate(dateString));
        }
        
        grid.appendChild(dayElement);
      });
    }

    // Duels en attente - AFFICHAGE CONDITIONNEL
    async function loadPendingDuels(containerId) {
      try {
        const response = await fetch('/api/duels/pending');
        const duels = await response.json();
        
        const container = document.getElementById(containerId);
        const section = document.getElementById('pending-duels-section');
        
        if (!duels || duels.length === 0) {
          // Masquer complètement la section si pas de duels
          section.style.display = 'none';
          return;
        }

        // Afficher la section et montrer les duels
        section.style.display = 'block';
        
        container.innerHTML = duels.map(duel => {
          const isChallenger = duel.user_role === 'challenger';
          const opponentName = isChallenger ? duel.opponent_name : duel.challenger_name;
          const shortName = opponentName.split(' ')[0];
          
          const userScore = isChallenger ? duel.challenger_score : duel.opponent_score;
          const opponentScore = isChallenger ? duel.opponent_score : duel.challenger_score;
          
          const hasUserPlayed = userScore !== null;
          const hasOpponentPlayed = opponentScore !== null;
          
          let status = '', cta = '';
          
          if (!hasUserPlayed) {
            status = '<span class="badge bg-primary small">À jouer</span>';
            cta = `<button class="btn btn-sm btn-primary" onclick="playDuel(${duel.id})">Jouer</button>`;
          } else if (!hasOpponentPlayed) {
            status = '<span class="badge bg-secondary small">En attente</span>';
            cta = '';
          } else {
            status = '<span class="badge bg-success small">Terminé</span>';
            cta = `<button class="btn btn-sm btn-outline-secondary" onclick="viewDuelResult(${duel.id})">Voir</button>`;
          }
          
          return `
            <div class="d-flex justify-content-between align-items-center border-bottom py-2">
              <div class="d-flex align-items-center">
                <div class="avatar me-2">
                  <i class="bi bi-person"></i>
                </div>
                <div>
                  <div class="small fw-medium">${shortName}</div>
                  <div class="text-muted" style="font-size: 0.75rem;">
                    ${userScore || '?'} - ${opponentScore || '?'}
                    ${status}
                  </div>
                </div>
              </div>
              ${cta}
            </div>
          `;
        }).join('');
        
      } catch (error) {
        console.error('Erreur duels:', error);
        // En cas d'erreur, masquer aussi la section
        document.getElementById('pending-duels-section').style.display = 'none';
      }
    }

    // Utilitaires
    function generateCurrentYearDates() {
      const dates = [];
      const today = new Date();
      const currentYear = today.getFullYear();
      const startDate = new Date(currentYear, 0, 1);
      const endDate = new Date(currentYear, 11, 31);

      const firstMonday = new Date(startDate);
      const dayOfWeek = firstMonday.getDay();
      const diffToMonday = dayOfWeek === 0 ? -6 : 1 - dayOfWeek;
      firstMonday.setDate(firstMonday.getDate() + diffToMonday);

      const currentDate = new Date(firstMonday);
      while (currentDate <= endDate) {
        dates.push(new Date(currentDate));
        currentDate.setDate(currentDate.getDate() + 1);
      }

      return dates;
    }

    function getContributionLevel(count) {
      if (count === 0) return 0;
      if (count === 1) return 1;
      if (count <= 3) return 2;
      if (count <= 5) return 3;
      return 4;
    }

    function formatDate(dateString) {
      return new Date(dateString).toLocaleDateString('fr-FR');
    }

    function getScoreColor(ratio) {
      if (ratio >= 80) return 'success';
      if (ratio >= 60) return 'warning';
      return 'danger';
    }

    function getQuizTypeColor(type) {
      const colors = {
        'pinyin': 'info',
        'character': 'warning', 
        'mixed': 'success'
      };
      return colors[type] || 'secondary';
    }

    function playDuel(duelId) {
      window.location.href = `/duel-play/${duelId}`;
    }

    function viewDuelResult(duelId) {
      window.location.href = `/duels?view_result=${duelId}`;
    }

    function displayContributionsError() {
      document.getElementById('contributionsGrid').innerHTML = `
        <div class="text-center text-warning py-3">
          <i class="bi bi-exclamation-triangle"></i>
          <div class="small mt-1">Données indisponibles</div>
        </div>
      `;
    }

    // Édition du prénom
function enableNameEdit() {
  const currentName = document.getElementById('userName').textContent;
  document.getElementById('nameInput').value = currentName;
  document.getElementById('nameEditForm').style.display = 'block';
  document.getElementById('userName').parentElement.style.display = 'none';
}

function cancelNameEdit() {
  document.getElementById('nameEditForm').style.display = 'none';
  document.getElementById('userName').parentElement.style.display = 'flex';
}

async function saveName() {
  const newName = document.getElementById('nameInput').value.trim();
  
  if (!newName) {
    showNotification('Le prénom ne peut pas être vide', 'error');
    return;
  }
  
  try {
    const saveButton = document.querySelector('#nameEditForm button.btn-success');
    saveButton.innerHTML = '<i class="bi bi-arrow-repeat spinner"></i>';
    saveButton.disabled = true;

    const response = await fetch('/api/user/update-name', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ name: newName }),
      credentials: 'include'
    });
    
    const result = await response.json();
    
    if (!response.ok) {
      throw new Error(result.message || `Erreur: ${response.status}`);
    }
    
    if (result.success) {
      document.getElementById('userName').textContent = result.newName || newName;
      cancelNameEdit();
      showNotification('Prénom mis à jour avec succès!', 'success');
    } else {
      throw new Error(result.message || 'Erreur inconnue');
    }
    
  } catch (error) {
    console.error('Erreur:', error);
    showNotification('Erreur: ' + error.message, 'error');
  } finally {
    const saveButton = document.querySelector('#nameEditForm button.btn-success');
    if (saveButton) {
      saveButton.innerHTML = '<i class="bi bi-check"></i>';
      saveButton.disabled = false;
    }
  }
}
    
// Fonction pour afficher les notifications
    function showNotification(message, type = 'info') {
      // Créer une notification toast Bootstrap
      const toast = document.createElement('div');
      toast.className = `toast align-items-center text-bg-${type === 'success' ? 'success' : 'danger'} border-0`;
      toast.innerHTML = `
        <div class="d-flex">
          <div class="toast-body">
            ${message}
          </div>
          <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
        </div>
      `;
      
      const container = document.createElement('div');
      container.className = 'toast-container position-fixed top-0 end-0 p-3';
      container.appendChild(toast);
      document.body.appendChild(container);
      
      const bsToast = new bootstrap.Toast(toast);
      bsToast.show();
      
      // Nettoyer après fermeture
      toast.addEventListener('hidden.bs.toast', () => {
        container.remove();
      });
    }

    // Édition du prénom
function enableNameEdit() {
  const currentName = document.getElementById('userName').textContent;
  document.getElementById('nameInput').value = currentName;
  document.getElementById('nameEditForm').style.display = 'block';
  document.getElementById('userName').parentElement.style.display = 'none';
}

function cancelNameEdit() {
  document.getElementById('nameEditForm').style.display = 'none';
  document.getElementById('userName').parentElement.style.display = 'flex';
}

async function saveName() {
  const newName = document.getElementById('nameInput').value.trim();
  
  if (!newName) {
    showNotification('Le prénom ne peut pas être vide', 'error');
    return;
  }
  
  try {
    const saveButton = document.querySelector('#nameEditForm button.btn-success');
    saveButton.innerHTML = '<i class="bi bi-arrow-repeat spinner"></i>';
    saveButton.disabled = true;

    // TEMPORAIRE: Utilisez la route test
    const response = await fetch('/api/user/update-name', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ name: newName }),
      credentials: 'include'
    });
    
    // Vérifiez le contenu de la réponse
    const responseText = await response.text();
    console.log('Réponse brute:', responseText);
    
    // Essayez de parser en JSON
    let result;
    try {
      result = JSON.parse(responseText);
    } catch (e) {
      throw new Error(`Le serveur a renvoyé du HTML au lieu de JSON. Vérifiez que la route existe.`);
    }
    
    if (!response.ok) {
      throw new Error(result.message || `Erreur HTTP: ${response.status}`);
    }
    
    if (result.success) {
      document.getElementById('userName').textContent = newName;
      cancelNameEdit();
      showNotification('Test réussi! ' + result.message, 'success');
    } else {
      throw new Error(result.message || 'Erreur inconnue');
    }
    
  } catch (error) {
    console.error('Erreur:', error);
    showNotification('Erreur: ' + error.message, 'error');
  } finally {
    const saveButton = document.querySelector('#nameEditForm button.btn-success');
    if (saveButton) {
      saveButton.innerHTML = '<i class="bi bi-check"></i>';
      saveButton.disabled = false;
    }
  }
}


// Fonction pour afficher les notifications
function showNotification(message, type = 'info') {
  // Créer une notification toast Bootstrap
  const toast = document.createElement('div');
  toast.className = `toast align-items-center text-bg-${type === 'success' ? 'success' : 'danger'} border-0`;
  toast.innerHTML = `
    <div class="d-flex">
      <div class="toast-body">
        ${message}
      </div>
      <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
    </div>
  `;
  
  const container = document.createElement('div');
  container.className = 'toast-container position-fixed top-0 end-0 p-3';
  container.appendChild(toast);
  document.body.appendChild(container);
  
  const bsToast = new bootstrap.Toast(toast);
  bsToast.show();
  
  // Nettoyer après fermeture
  toast.addEventListener('hidden.bs.toast', () => {
    container.remove();
  });
}
  </script>
</body>
</html>