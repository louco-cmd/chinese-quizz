<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>Âä†Ê≤πÔºÅCollection</title>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css" rel="stylesheet">

<style>
/* ===================================
   G√âN√âRAL
   =================================== */
html,
body {
    margin: 0;
    padding: 0;
    overflow-x: hidden;
    margin-bottom: 45px; /* Espace pour la navigation fixe */
}

/* ===================================
   CARTES & CONTENEURS
   =================================== */
.card-custom-bg {
    background-color: #f7fcf7;
    border: 1px solid #c8e6c9;
}

#card-container,
#list-container {
    transition: opacity 0.5s ease, transform 0.5s ease, max-height 0.5s ease-in-out;
}

.hidden {
    opacity: 0;
    transform: translateY(50px);
    pointer-events: none;
    max-height: 0;
    overflow: hidden;
    visibility: hidden;
}

.visible {
    opacity: 1;
    transform: translateY(0);
    pointer-events: all;
    max-height: 2000px;
    visibility: visible;
}

/* ===================================
   TYPOGRAPHIE CHINOISE
   =================================== */
.fs-chinese {
    font-size: 6.25rem; /* 100px */
    line-height: 1.2;
}

.fs-chinese-small {
    font-size: 4.25rem; /* 68px - pour 3+ caract√®res */
    line-height: 1.2;
}

.fs-pinyin {
    font-size: 2.25rem; /* 36px */
}

.text-box {
    min-height: 170px;
    align-content: center;
}

.text-context {
    color: #999;
    font-size: 0.875rem; /* 14px */
}

/* ===================================
   √âTIQUETTE HSK
   =================================== */
.hsk-tag-custom {
    background-color: white;
    color: #4CAF50;
    font-weight: bold;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    border-radius: 0.25rem;
}

/* ===================================
   LISTE & TABLEAU
   =================================== */
#listBody tr {
    cursor: pointer;
    transition: background-color 0.2s;
}

#listBody tr:hover {
    background-color: rgba(0, 123, 255, 0.1);
}

/* ===================================
   SYST√àME DE HOVER - CARACT√àRES
   =================================== */
.chinese-character {
    cursor: help;
    transition: all 0.2s ease;
    padding: 2px 4px;
    border-radius: 4px;
    display: inline-block;
    position: relative;
}

.chinese-character:hover {
    background-color: rgba(13, 110, 253, 0.1);
}

/* ===================================
   MODALE DE CARACT√àRE (POPUP)
   =================================== */
.character-modal {
    position: fixed;
    z-index: 10000;
    background: white;
    border: 2px solid #0d6efd;
    border-radius: 10px;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
    padding: 15px;
    min-width: 180px;
    max-width: 250px;
    pointer-events: auto;
    transition: opacity 0.2s ease-in-out;
}

/* Ajoutez simplement cette classe √† votre div existante */
.floating-nav {
    position: fixed !important;
    top: 50% !important;
    left: 50% !important;
    transform: translate(-50%, -50%) !important;
    z-index: 1000 !important;
    width: 100% !important;
    max-width: 100vw !important;
    padding: 0 3rem !important;
}

/* Version mobile */
@media (max-width: 768px) {
    .floating-nav {
        position: static !important;
        transform: none !important;
        max-width: 18rem !important;
        margin: 1rem auto !important;
        padding: 0 !important;
    }
}
</style>

  <!-- Ajoute ces lignes -->
  <link rel="manifest" href="/manifest.json">
  <meta name="theme-color" content="#0d6efd"/>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">

  <!-- Ic√¥nes pour iOS -->
  <link rel="apple-touch-icon" href="/icons/icon-192.png">

  <!-- D√©tection PWA -->
  <script>
    if ('serviceWorker' in navigator) {
      navigator.serviceWorker.register('/sw.js');
    }
  </script>
</head>
<body>

 <div class="d-flex justify-content-between align-items-center bg-primary text-white p-3">
  <span class="fs-3 fw-bold user-select-all" style="cursor: pointer;" onclick="window.location='/dashboard'">
    Âä†Ê≤πÔºÅ
  </span>
</div>

  <!-- Navigation -->
  <%- include('partials/navbar', {currentPage: 'collection'}) %>

<section class="section d-flex flex-column align-items-center mt-4">
  <%- include('partials/voiceOn') %> 
  <div id="card-container" class="d-flex justify-content-center visible mb-2 position-relative"></div>

  <div id="list-container" class="container mt-4 hidden">
    <div class="mb-3" style="max-width: 400px;">
      <input type="text" id="searchInput" class="form-control" placeholder="Looking for a word...">
    </div>
    <table class="table table-striped">
      <thead>
        <tr>
          <th>Chinese</th>
          <th>Pinyin</th>
          <th>English</th>
        </tr>
      </thead>
      <tbody id="listBody"></tbody>
    </table>
  </div>

  <div class="d-flex justify-content-between w-100" style="max-width: 18rem;">
    <button id="prevBtn" class="btn btn-primary rounded-circle px-3 py-2">‚Äπ</button>
    <button id="nextBtn" class="btn btn-primary rounded-circle px-3 py-2">‚Ä∫</button>
  </div>
</section>

<!-- Modal Bootstrap -->
<div class="modal fade" id="editModal" tabindex="-1" aria-labelledby="editModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content bg-dark text-white">
      <div class="modal-header">
        <h5 class="modal-title" id="editModalLabel">Edit Word</h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <form id="editForm" class="p-3">
        <input type="hidden" id="editId" />
        <div class="mb-3"><label for="editChinese" class="form-label">Chinese</label><input type="text" class="form-control" id="editChinese" required></div>
        <div class="mb-3"><label for="editPinyin" class="form-label">Pinyin</label><input type="text" class="form-control" id="editPinyin"></div>
        <div class="mb-3"><label for="editEnglish" class="form-label">English</label><input type="text" class="form-control" id="editEnglish"></div>
        <div class="mb-3"><label for="editDescription" class="form-label">Description</label><textarea class="form-control" id="editDescription" rows="3"></textarea></div>
        <div class="text-end">
          <button type="button" class="btn btn-secondary me-2" data-bs-dismiss="modal">Cancel</button>
          <button type="submit" class="btn btn-primary">Save</button>
        </div>
      </form>
    </div>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
<script src="/JS/global.js"></script>
<script>

  let words=[], idx=0;
  let touchStartY = 0;
  const cardContainer=document.getElementById('card-container');
  const prevBtn=document.getElementById('prevBtn');
  const nextBtn=document.getElementById('nextBtn');
  const listContainer=document.getElementById('list-container');
  const listBody=document.getElementById('listBody');
  const searchInput = document.getElementById('searchInput');

  // modal
  const editModal=document.getElementById('editModal');
  const editForm=document.getElementById('editForm');
  const editId=document.getElementById('editId');
  const editChinese=document.getElementById('editChinese');
  const editPinyin=document.getElementById('editPinyin');
  const editEnglish=document.getElementById('editEnglish');
  const editDescription=document.getElementById('editDescription');

  // üéØ VARIABLES POUR LE SYST√àME DE HOVER
  let hoverModal = null;
  let cacheMots = null;
  let dernierFetch = 0;
  const CACHE_DURATION = 5 * 60 * 1000;
  let hoverTimeout = null;
  let isHoveringModal = false;

  // Load words
  async function loadWords(){
    const res=await fetch('/mes-mots'); 
    words=await res.json();
    if(!words.length){
      cardContainer.innerHTML='<p>No words yet.</p>';
      return;
    }
    idx=0; 
    showCard();
    showList();
  }


async function fetchCharacterData(character, event) {
    try {
        console.log('üîç Recherche pour:', character);
        
        // Annuler tout timeout de fermeture en cours
        if (hoverTimeout) {
            clearTimeout(hoverTimeout);
            hoverTimeout = null;
        }
        
        // Cr√©ation de la modale si n√©cessaire
        if (!hoverModal) {
            hoverModal = document.createElement('div');
            hoverModal.className = 'character-modal';
            hoverModal.style.cssText = `
                position: fixed;
                width: 200px;
                height: auto;
                z-index: 10000;
                display: none;
                background: white;
                border: 2px solid #0d6efd;
                border-radius: 10px;
                box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
                padding: 15px;
                pointer-events: auto;
            `;
            
            // Gestion du hover sur la modale
            hoverModal.addEventListener('mouseenter', () => {
                console.log('üîÑ Souris sur modale');
                if (hoverTimeout) {
                    clearTimeout(hoverTimeout);
                    hoverTimeout = null;
                }
            });
            
            hoverModal.addEventListener('mouseleave', () => {
                console.log('üö™ Souris quitte modale');
                hoverTimeout = setTimeout(() => {
                    if (hoverModal) {
                        hoverModal.style.display = 'none';
                    }
                }, 200);
            });
            
            document.body.appendChild(hoverModal);
        }

        // Positionnement
        if (event && event.target) {
            const rect = event.target.getBoundingClientRect();
            const scrollX = window.scrollX || document.documentElement.scrollLeft;
            const scrollY = window.scrollY || document.documentElement.scrollTop;
            
            const centerX = rect.left + (rect.width / 2) + scrollX;
            const characterTop = rect.top + scrollY;
            
            hoverModal.style.left = `${centerX}px`;
            hoverModal.style.top = `${characterTop - 5}px`;
            hoverModal.style.transform = 'translateX(-50%) translateY(+30%)';
        }
        
        // Afficher la modale
        hoverModal.style.display = 'block';
        
        // Spinner
        hoverModal.innerHTML = `
            <div style="text-align: center;">
                <div style="font-size: 2rem; font-weight: bold; margin-bottom: 10px;">${character}</div>
                <div class="spinner-border spinner-border-sm text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        `;

        // Recherche des donn√©es (ton code existant)
        let caractereExact = words.find(mot => 
            mot && mot.chinese && mot.chinese.length === 1 && mot.chinese === character
        );
        
        if (!caractereExact && cacheMots) {
            caractereExact = cacheMots.find(mot => 
                mot && mot.chinese && mot.chinese.length === 1 && mot.chinese === character
            );
        }

        if (!caractereExact && (!cacheMots || Date.now() - dernierFetch > CACHE_DURATION)) {
            try {
                const response = await fetch('/api/tous-les-mots');
                if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                
                cacheMots = await response.json();
                dernierFetch = Date.now();
                
                caractereExact = cacheMots.find(mot => 
                    mot && mot.chinese && mot.chinese.length === 1 && mot.chinese === character
                );
            } catch (cacheError) {
                console.error('‚ùå Erreur cache:', cacheError);
                cacheMots = [];
            }
        }

        if (!caractereExact) {
            const motContenant = cacheMots?.find(mot => 
                mot && mot.chinese && mot.chinese.includes(character) && mot.chinese.length > 1
            );
            
            if (motContenant) {
                caractereExact = {
                    chinese: character,
                    pinyin: `(Part of: ${motContenant.pinyin})`,
                    english: `Component of: ${motContenant.english}`,
                    hsk: motContenant.hsk
                };
            } else {
                caractereExact = await fetchCharacterFromAPI(character);
            }
        }

        // Mise √† jour de la modale
        if (hoverModal && hoverModal.style.display !== 'none') {
            if (caractereExact) {
                hoverModal.innerHTML = `
                    <div style="text-align: center;">
                        <div style="font-size: 2rem; font-weight: bold; margin-bottom: 10px;">${character}</div>
                        <div style="background: #e3f2fd; color: #1976d2; padding: 5px 10px; border-radius: 5px; margin-bottom: 8px;">
                            ${caractereExact.pinyin || 'N/A'}
                        </div>
                        <div style="color: #666; margin-bottom: 8px;">
                            ${caractereExact.english || 'No translation'}
                        </div>
                        ${caractereExact.hsk ? `
                            <div style="background: #e8f5e8; color: #2e7d32; padding: 3px 8px; border-radius: 5px; font-size: 0.8rem;">
                                HSK ${caractereExact.hsk}
                            </div>
                        ` : ''}
                    </div>
                `;
            } else {
                hoverModal.innerHTML = `
                    <div style="text-align: center;">
                        <div style="font-size: 2rem; font-weight: bold; margin-bottom: 10px;">${character}</div>
                        <div style="color: #999; font-size: 0.9rem;">Caract√®re non enregistr√©</div>
                    </div>
                `;
            }
        }

    } catch (error) {
        console.error('‚ùå Erreur:', error);
        if (hoverModal && hoverModal.style.display !== 'none') {
            hoverModal.innerHTML = `
                <div style="text-align: center;">
                    <div style="font-size: 2rem; font-weight: bold; margin-bottom: 10px;">${character}</div>
                    <div style="color: #d32f2f; font-size: 0.9rem;">Erreur de chargement</div>
                </div>
            `;
        }
    }
}


  // scroll control
cardContainer.addEventListener('wheel', (e) => {
    const canScroll = cardContainer.scrollHeight > cardContainer.clientHeight;
    
    // Si la carte tient dans le conteneur, on autorise le toggle
    if(!canScroll && Math.abs(e.deltaY) > 30){
      toggleView('list');
    }
  });

//create card element
function createCardElement(word) {
    const card = document.createElement('div');
    card.classList.add('col', 'mb-4'); 
    
    const hskLevelDisplay = word.hsk || 'Street';
    const chineseFontSizeClass = (word.chinese && word.chinese.length >= 3) ? 'fs-chinese-small' : 'fs-chinese';

    card.innerHTML = `
      <div class="card card-custom-bg rounded-4 shadow-lg p-3 mx-auto" style="width: 320px; height: 500px; position: relative;">

          <div class="position-absolute top-0 end-0 mt-3 me-3">
              <span class="hsk-tag-custom py-1 px-2 border border-light">HSK : ${hskLevelDisplay}</span>
          </div>

          <!-- CARACT√àRE CHINOIS CLIQUABLE -->
          <div class="bg-white border rounded-3 p-4 py-2 mt-3 flex-grow-0">
              <div class="text-dark text-center text-box ${chineseFontSizeClass} chinese-clickable" 
                   data-word-id="${word.id}"
                   data-chinese-text="${word.chinese}"
                   title="Cliquer pour √©couter">
                  ${word.chinese}
              </div>
          </div>

          <div class="flex-grow-1 d-flex flex-column justify-content-between">
              <div>
                  <div class="fs-pinyin fw-bold text-dark mb-1">${word.pinyin || ''}</div>
                  <div class="fs-5 text-success mb-3">${word.english || 'No Translation'}</div>
                  <div class="pt-3 border-top border-light-subtle">
                      <div class="text-context">${word.description || 'No description provided.'}</div>
                  </div>
              </div>
              
              <!-- BOUTON AUDIO ADDITIONNEL -->
              <div class="d-flex justify-content-between align-items-center mt-auto">
                  <button class="btn btn-sm btn-outline-success btn-audio" 
                    data-text="${word.chinese}"
                    title="√âcouter la prononciation">
                    <i class="bi bi-volume-up"></i>  <!-- ‚Üê Picto uniquement -->
                  </button>
                  <a href="#" class="btn btn-link text-success edit-btn">‚úèÔ∏è Edit</a>
              </div>
          </div>
      </div>
    `;

    // Transforme les caract√®res chinois (ton code existant)
    const chineseContainer = card.querySelector('.chinese-clickable');
    if (chineseContainer && word.chinese) {
      transformChineseCharacters(word.chinese, chineseContainer);
    }

    // Gestion des √©v√©nements
    card.querySelector('.edit-btn').onclick = () => openEdit(word);
    
    return card;
}

// üéØ SYST√àME DE HOVER SIMPLIFI√â - APPROCHE DIFF√âRENTE
function transformChineseCharacters(chineseWord, container) {
    if (!container || !chineseWord) return;

    container.classList.add('chinese-container');
    const characters = Array.from(chineseWord);
    
    if (characters.length <= 1) {
        container.textContent = chineseWord;
        return;
    }
    
    container.innerHTML = '';
    
    characters.forEach((character) => {
        const span = document.createElement('span');
        span.className = 'chinese-character';
        span.setAttribute('data-char', character);
        span.textContent = character;
        
        span.addEventListener('mouseenter', (e) => {
            console.log('üîç Hover sur:', character);
            // Annuler la fermeture si on survole rapidement
            if (hoverTimeout) {
                clearTimeout(hoverTimeout);
                hoverTimeout = null;
            }
            handleCharacterHover(e);
        });
        
        span.addEventListener('mouseleave', () => {
            console.log('üö™ Leave caract√®re');
            // D√©lai avant fermeture pour laisser le temps d'aller sur la modale
            hoverTimeout = setTimeout(() => {
                if (hoverModal) {
                    hoverModal.style.display = 'none';
                }
            }, 200);
        });
        
        container.appendChild(span);
    });
}

function handleCharacterHover(event) {
    const character = event.target.getAttribute('data-char');
    console.log('üëÜ Nouveau hover:', character);
    
    const container = event.target.closest('.chinese-container');
    if (!container) return;
    
    fetchCharacterData(character, event);
}

function closeModal() {
    if (hoverModal) {
        hoverModal.style.display = 'none';
        hoverModal.style.opacity = '0';
    }
}

function showCard() {
    if (!words.length) return;
    const word = words[idx];
    if (!word) return;
    cardContainer.innerHTML = '';
    const newCard = createCardElement(word);
    cardContainer.appendChild(newCard);
  }

  // Navigation
  prevBtn.onclick = ()=>{ idx=(idx-1+words.length)%words.length; showCard(); toggleView('card'); };
  nextBtn.onclick = ()=>{ idx=(idx+1)%words.length; showCard(); toggleView('card'); };

  window.addEventListener('keydown',e=>{
    if(e.key==='ArrowLeft') prevBtn.click();
    else if(e.key==='ArrowRight') nextBtn.click();
  });

  // List view
  function showList() {
    listBody.innerHTML = '';
    words.forEach((word,i)=>{
      const row=document.createElement('tr');
      row.innerHTML = `<td>${word.chinese}</td><td>${word.pinyin||''}</td><td>${word.english||''}</td>`;
      row.onclick = ()=>{
        idx=i;
        showCard();
        toggleView('card');
      };
      listBody.appendChild(row);
    });
  }

  function toggleView(view){
    if(view==='list'){
      listContainer.classList.remove('hidden'); 
      listContainer.classList.add('visible');
      cardContainer.classList.remove('visible'); 
      cardContainer.classList.add('hidden');
      prevBtn.style.display = 'none';
      nextBtn.style.display = 'none';
      window.scrollTo({ top: listContainer.offsetTop, behavior: 'smooth' });
    } else {
      cardContainer.classList.remove('hidden'); 
      cardContainer.classList.add('visible');
      listContainer.classList.remove('visible'); 
      listContainer.classList.add('hidden');
      prevBtn.style.display = 'inline-block';
      nextBtn.style.display = 'inline-block';
      window.scrollTo({ top: cardContainer.offsetTop, behavior: 'smooth' });
    }
  }

  // Scroll pour passer de carte √† liste
  window.addEventListener('wheel', (e)=>{
    if(e.deltaY > 30 && cardContainer.classList.contains('visible')) toggleView('list');
    else if(e.deltaY < -30 && listContainer.classList.contains('visible')) toggleView('card');
  });

  cardContainer.addEventListener('touchstart', e => {
    touchStartY = e.touches[0].clientY;
  });

  cardContainer.addEventListener('touchend', e => {
    const touchEndY = e.changedTouches[0].clientY;
    const deltaY = touchEndY - touchStartY;
    if(Math.abs(deltaY) > 30){
      toggleView('list');
    }
  });

  // Modal
  function openEdit(word){
    editId.value = word.id;
    editChinese.value = word.chinese;
    editPinyin.value = word.pinyin||'';
    editEnglish.value = word.english||'';
    editDescription.value = word.description||'';
    const modal = new bootstrap.Modal(editModal);
    modal.show();
  }

  // Edit submit
  editForm.onsubmit = async (e)=>{
    e.preventDefault();
    const payload={
      chinese: editChinese.value,
      pinyin: editPinyin.value,
      english: editEnglish.value,
      description: editDescription.value
    };
    try{
      await fetch(`/update/${editId.value}`,{
        method:'PUT',
        headers:{'Content-Type':'application/json'},
        body:JSON.stringify(payload)
      });
      words[idx]={...words[idx], ...payload};
      showCard();
      showList();
    }catch(err){alert("Update failed");}
    const bsModal = bootstrap.Modal.getInstance(editModal);
    if(bsModal) bsModal.hide();
  };

  //search a specific word in list
  searchInput.addEventListener('input', () => {
    const query = searchInput.value.toLowerCase();
    document.querySelectorAll('#listBody tr').forEach(row => {
      const text = row.textContent.toLowerCase();
      row.style.display = text.includes(query) ? '' : 'none';
    });
  });

  loadWords();
// Navigation System Simple
class SimpleNavigation {
    constructor() {
        this.currentPage = 'dashboard';
        this.init();
    }
    
    init() {
        document.querySelectorAll('.nav-link').forEach(link => {
            link.addEventListener('click', (e) => {
                e.preventDefault();
                const targetPage = link.getAttribute('data-page');
                
                if (targetPage === this.currentPage || link.classList.contains('disabled')) {
                    return;
                }
                
                this.navigateTo(targetPage);
            });
        });
        
        this.showPage('dashboard');
    }
    
    navigateTo(page) {
        this.updateActiveNavItem(page);
        this.showPage(page);
        history.pushState({ page }, '', `#${page}`);
        this.currentPage = page;
    }
    
    updateActiveNavItem(page) {
        document.querySelectorAll('.nav-link').forEach(link => {
            link.classList.remove('active');
        });
        
        const activeLink = document.querySelector(`[data-page="${page}"]`);
        if (activeLink) {
            activeLink.classList.add('active');
        }
    }
    
    showPage(page) {
        document.querySelectorAll('.page-content').forEach(content => {
            content.classList.add('d-none');
        });
        
        const activePage = document.getElementById(page);
        if (activePage) {
            activePage.classList.remove('d-none');
        }
    }
    
    handlePopState(event) {
        if (event.state && event.state.page) {
            this.navigateTo(event.state.page);
        }
    }
}
// D√©tection automatique de la page active
function setActiveNavItem() {
    const path = window.location.pathname;
    
  document.querySelectorAll('.nav-link').forEach(link => {
        link.classList.remove('active');
        // Active si le data-page correspond √† l'URL
        if (path.includes(link.getAttribute('data-page'))) {
            link.classList.add('active');
        }
    });
}
// Appeler au chargement
document.addEventListener('DOMContentLoaded', setActiveNavItem);

</script>

</body>
</html>
