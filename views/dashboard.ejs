<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1"/>
  <title>Âä†Ê≤πÔºÅ</title>

  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css" rel="stylesheet">
  
  <link rel="manifest" href="/manifest.json">
  <meta name="theme-color" content="#0d6efd"/>
  <link rel="apple-touch-icon" href="/icons/icon-192.png">

  <script>
    if ('serviceWorker' in navigator) {
      navigator.serviceWorker.register('/sw.js');
    }
  </script>
  
  <style>
/* üî• ANIMATION BULLE - PART DE LA BORDURE ET S'√âLOIGNE */
.bubble {
  position: fixed;
  width: 30px;
  height: 30px;
  pointer-events: none;
  z-index: 10000;
  border-radius: 50%;
  box-shadow: 0 0 12px rgba(255,255,255,0.7);
  filter: brightness(1.1) saturate(1.3);
  opacity: 0;
}

/* Animations qui partent de la bordure et s'√©loignent */
.bubble-1 { animation: bubbleFloat1 1.8s ease-out forwards; }
.bubble-2 { animation: bubbleFloat2 2s ease-out forwards; }
.bubble-3 { animation: bubbleFloat3 1.6s ease-out forwards; }
.bubble-4 { animation: bubbleFloat4 1.9s ease-out forwards; }
.bubble-5 { animation: bubbleFloat5 2.1s ease-out forwards; }

@keyframes bubbleFloat1 {
  0% {
    transform: scale(0.6) translate(0, 0) rotate(0deg);
    opacity: 0.9;
  }
  20% {
    transform: scale(0.8) translate(-15px, -25px) rotate(45deg);
    opacity: 1;
  }
  100% {
    transform: scale(0.4) translate(-60px, -180px) rotate(180deg);
    opacity: 0;
  }
}

@keyframes bubbleFloat2 {
  0% {
    transform: scale(0.6) translate(0, 0) rotate(0deg);
    opacity: 0.9;
  }
  20% {
    transform: scale(0.8) translate(20px, -30px) rotate(-30deg);
    opacity: 1;
  }
  100% {
    transform: scale(0.4) translate(80px, -220px) rotate(-220deg);
    opacity: 0;
  }
}

@keyframes bubbleFloat3 {
  0% {
    transform: scale(0.6) translate(0, 0) rotate(0deg);
    opacity: 0.9;
  }
  20% {
    transform: scale(0.8) translate(-25px, -20px) rotate(60deg);
    opacity: 1;
  }
  100% {
    transform: scale(0.4) translate(-45px, -200px) rotate(250deg);
    opacity: 0;
  }
}

@keyframes bubbleFloat4 {
  0% {
    transform: scale(0.6) translate(0, 0) rotate(0deg);
    opacity: 0.9;
  }
  20% {
    transform: scale(0.8) translate(10px, -35px) rotate(-45deg);
    opacity: 1;
  }
  100% {
    transform: scale(0.4) translate(35px, -240px) rotate(-280deg);
    opacity: 0;
  }
}

@keyframes bubbleFloat5 {
  0% {
    transform: scale(0.6) translate(0, 0) rotate(0deg);
    opacity: 0.9;
  }
  20% {
    transform: scale(0.8) translate(-5px, -40px) rotate(75deg);
    opacity: 1;
  }
  100% {
    transform: scale(0.4) translate(-70px, -260px) rotate(300deg);
    opacity: 0;
  }
}

/* Styles pour les messages d'erreur */
#chineseError {
  transition: all 0.3s ease;
}

/* Animation pour les messages temporaires */
@keyframes fadeInOut {
  0% { opacity: 0; transform: translateY(-10px); }
  20% { opacity: 1; transform: translateY(0); }
  80% { opacity: 1; transform: translateY(0); }
  100% { opacity: 0; transform: translateY(-10px); }
}

.fade-message {
  animation: fadeInOut 3s ease-in-out;
}



    topbarColor {
      background-color: #0d6dfd00 !important;
    }

    body {
      background: linear-gradient(180deg, #0d6efd 0%, #0dcaf0 100%);
      min-height: 100vh;
      padding: 0;
      margin: 0;
      overflow: hidden;
    }
    
    .screen-container {
      height: 100vh;
      display: flex;
      flex-direction: column;
    }
    
    .content-area {
      flex: 1;
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 20px;
      overflow: hidden;
    }
    
    .floating-card {
      background: white;
      border-radius: 20px;
      border: none;
      width: 100%;
      max-height: 80vh;
      overflow: hidden;
    }

    /* Ajustements pour la carte compacte */
.floating-card .card-content.py-3 {
  padding-top: 1rem !important;
  padding-bottom: 1rem !important;
}

/* Boutons plus compacts */
.btn.py-2 {
  padding-top: 0.5rem !important;
  padding-bottom: 0.5rem !important;
  font-size: 0.9rem;
}

/* Aper√ßu chinois plus petit */
.chinese-preview.fs-2 {
  font-size: 2rem !important;
  min-height: 50px;
}

/* Champs en ligne plus serr√©s */
.d-flex.justify-content-between.py-1 {
  padding-top: 0.25rem !important;
  padding-bottom: 0.25rem !important;
  border-bottom: 1px solid rgba(255,255,255,0.1);
}

.d-flex.justify-content-between.py-1:last-child {
  border-bottom: none;
}
    
/* üî• VERSION MOBILE */
    @media (max-width: 767.98px) {
      .floating-card {
        max-width: 400px;
      }
    }
    
    /* üî• VERSION DESKTOP - BO√éTE PLUS LARGE */
    @media (min-width: 768px) {
      .floating-card {
        max-width: 500px; /* Plus large sur desktop */
      }
      
      .card-content {
        padding: 40px 35px; /* Plus d'espace int√©rieur */
      }
      
      .chinese-preview {
        font-size: 3rem; /* Caract√®res plus grands */
        margin: 20px 0;
      }
      
      .form-control {
        padding: 14px 18px;
        font-size: 1.1rem;
      }
      
      .btn {
        padding: 14px 24px;
        font-size: 1.1rem;
      }
    }
    
    .card-content {
      padding: 30px 25px;
      height: 100%;
      display: flex;
      flex-direction: column;
    }
    
    .chinese-preview {
      font-size: 2.5rem;
      font-weight: bold;
      color: #0d6efd;
      text-align: center;
      margin: 15px 0;
      min-height: 60px;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    
    .form-control {
      border-radius: 12px;
      border: 2px solid #e9ecef;
      padding: 12px 15px;
      font-size: 1rem;
    }
    
    .form-control:focus {
      border-color: #0d6efd;
      box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, 0.25);
    }
    
    .btn {
      border-radius: 12px;
      padding: 12px 20px;
      font-weight: 600;
    }
    
    .word-field {
      background: #f8f9fa;
      border-radius: 10px;
      padding: 12px;
      margin-bottom: 12px;
    }
    
    .word-field label {
      font-weight: 600;
      color: #495057;
      margin-bottom: 5px;
      font-size: 0.9rem;
    }
    
    .screen {
      width: 100%;
      height: 100%;
      display: none;
    }
    
    .screen.active {
      display: block;
      justify-items: anchor-center;
    }
    
    .compact-text {
      font-size: 0.85rem;
      line-height: 1.3;
    }
    
    .status-message {
      min-height: 24px;
      font-size: 0.9rem;
      margin: 10px 0;
    }
    
    /* üî• DESKTOP - AM√âLIORATIONS SUPPLEMENTAIRES */
    @media (min-width: 768px) {
      .word-field {
        padding: 15px;
        margin-bottom: 15px;
      }
      
      .word-field label {
        font-size: 1rem;
      }
      
      .compact-text {
        font-size: 0.95rem;
      }
      
      .status-message {
        font-size: 1rem;
        margin: 15px 0;
      }
    }
  </style>
</head>
<body class="bg-primary">

<!-- TOP BAR -->
<div class="d-flex justify-content-between align-items-center topbarColor text-white p-3">
  <span class="fs-3 fw-bold user-select-all" style="cursor: pointer;" onclick="window.location='/dashboard'">
    Âä†Ê≤πÔºÅ
  </span>
  <div class="position-relative">
    <i class="bi bi-bell fs-4" style="cursor: pointer;"></i>
    <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">
      3
      <span class="visually-hidden">notifications</span>
    </span>
  </div>
</div>

<!-- CONTENT AREA - SANS SCROLL -->
<div class="screen-container">
  <div class="content-area">
    
    <div id="inputScreen" class="screen active">
  <div class="floating-card bg-transparent border-0">
    <div class="card-content">
      <div class="text-center mb-4">
        <!-- Icone et texte c√¥te √† c√¥te -->
        <div class="d-flex align-items-center justify-content-center mb-2">
          <i class="bi bi-plus-circle-fill text-white me-2 fs-1"></i>
          <h2 class="text-white mb-0">Add Word</h2>
        </div>
      </div>
      
      <!-- Champ de saisie -->
 <!-- Champ de saisie -->
<div class="mb-4">
  <label for="chinese" class="form-label fw-bold text-white"></label>
  <input
    type="text"
    id="chinese"
    class="form-control bg-transparent text-white border-white border-2"
    placeholder="Write your character here..."
    required
    autofocus
    maxlength="6"
    style="--bs-border-opacity: 1;"
    onfocus="this.style.boxShadow='0 0 0 0.3rem rgba(255,255,255,0.25)'"
    onblur="this.style.boxShadow='none'"
    oninput="validateChineseInput(this)"
  >
  <!-- Disclaimer -->
  <div class="text-white-50 small mt-2 text-center">
    <i class="bi bi-info-circle me-1"></i>Only Chinese characters accepted (max 6)
  </div>
  <!-- Message d'erreur -->
  <div id="chineseError" class="text-warning small mt-1 text-center" style="display: none;"></div>
</div>
      <!-- CTA blanc -->
      <div class="d-grid mt-2">
        <button type="button" class="btn btn-light" onclick="searchAndAddWord()">
          <i class="bi bi-search me-2"></i>Add the Word
        </button>
      </div>
      
      <!-- Message de statut -->
      <div id="statusMessage" class="status-message text-center text-white mt-3"></div>
    </div>
  </div>

      <!-- <div id="motivationQuote" class="alert alert-light border-0 mt-3 shadow-sm" role="alert">
        <div class="d-flex align-items-center justify-content-center">
          <i class="bi bi-chat-dots text-primary me-2 fs-5"></i>
          <span class="fst-italic text-dark mb-0"></span>
          <i class="bi bi-emoji-smile text-warning ms-2 fs-5"></i>
        </div>
      </div>
     -->
      
<!-- üî• √âCRAN 2 : MOT EXISTANT - VERSION COMPACTE -->
<div id="existingWordScreen" class="screen">
  <div class="floating-card border-0 shadow-none">
    <div class="card-content py-3">
      <div class="text-center">
        <h3 class="text-success my-1">
          <i class="bi bi-check-circle-fill me-2"></i>Word Found
        </h3>
        <p class="compact-text">This word exists in our database</p>
      </div>
      
      <!-- Aper√ßu -->
      <div class="chinese-preview fs-2 mb-3" id="previewChinese"></div>
      
      <!-- Champs compacts -->
      <div class="mb-3">
        <div class="d-flex justify-content-between align-items-center mb-2 py-1">
          <small class="fw-semibold opacity-75">Pinyin</small>
          <div class="compact-text" id="displayPinyin">-</div>
        </div>
        <div class="d-flex justify-content-between align-items-center mb-2 py-1">
          <small class="fw-semibold opacity-75">English</small>
          <div class="compact-text text-end" id="displayEnglish">-</div>
        </div>
        <div class="d-flex justify-content-between align-items-start py-1">
          <small class="fw-semibold opacity-75">Description</small>
          <div class="compact-text text-end small opacity-90" id="displayDescription" style="max-width: 70%;">-</div>
        </div>
      </div>
      
      <!-- Actions compactes -->
      <div class="d-grid gap-2 mt-3">
        <button type="button" class="btn btn-success py-2" id="confirmAddBtn" onclick="confirmAddExistingWord()">
          <i class="bi bi-check-lg me-2"></i>Confirm & Add
        </button>
        <button type="button" class="btn btn-outline-secondary py-2" onclick="showNewWordScreen()">
          <i class="bi bi-pencil me-2"></i>Edit Before Adding
        </button>
        <button type="button" class="btn btn-outline-secondary py-2" onclick="showInputScreen()">
          <i class="bi bi-arrow-left me-2"></i>Cancel
        </button>
      </div>
    </div>
  </div>
</div>
    
    <!-- üî• √âCRAN 3 : NOUVEAU MOT -->
    <div id="newWordScreen" class="screen">
      <div class="floating-card">
        <div class="card-content">
          <div class="text-center mb-3">
            <h3 class="text-warning mb-1">
              <i class="bi bi-exclamation-triangle-fill me-2"></i>New Word
            </h3>
            <p class="text-muted compact-text">Please complete the information</p>
          </div>
          
          <!-- Aper√ßu -->
          <div class="chinese-preview" id="newPreviewChinese"></div>
          
          <!-- Champs √©ditables -->
            <label for="newPinyin" class="form-label"></label>
            <input
              type="text"
              id="newPinyin"
              class="form-control"
              placeholder="Enter pinyin..."
            >
          
            <label for="newEnglish" class="form-label"></label>
            <input
              type="text"
              id="newEnglish"
              class="form-control"
              placeholder="English translation..."
              required
            >
          
            <label for="newDescription" class="form-label"></label>
            <textarea
              id="newDescription"
              class="form-control"
              rows="2"
              placeholder="Description or notes..."
              style="resize: none;"
            ></textarea>

          
          <!-- Actions -->
          <div class="d-grid gap-2 mt-2">
            <button type="button" class="btn btn-success" onclick="confirmAddNewWord()">
              <i class="bi bi-check-lg me-2"></i>Add to Collection
            </button>
            <button type="button" class="btn btn-outline-secondary" onclick="showInputScreen()">
              <i class="bi bi-arrow-left me-2"></i>Cancel
            </button>
          </div>
        </div>
      </div>
    </div>
    
  </div>
</div>

<!-- NAVIGATION BAR -->
<%- include('partials/navbar', {currentPage: currentPage}) %>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
<script src="/js/global.js"></script>
<script>
let currentChinese = '';
let existingWordData = null;

// üî• PHRASES DE MOTIVATION D√âCAL√âES ET MARRANTES
const motivationQuotes = [
  "Your pinyin is showing! Â∞èÂøÉ! ü©≤",
  "Adding words like a Mandarin boss! ü•∑",
  "This character won't learn itself! Âø´ÁÇπ! ‚ö°",
  "Your brain: 'More Chinese, less Netflix!' üì∫‚ùå",
  "Becoming a Ê±âÂ≠ó ninja, one character at a time! ü•∑",
  "Your future self ordering dumplings like a pro! ü•ü",
  "This is how you avoid pointing at menus! üçúüëâ",
  "Your accent is getting less 'foreign tourist'! üó∫Ô∏è",
  "Soon you'll understand Chinese memes! ÂìàÂìàÂìà! üòÇ",
  "Building your vocabulary, one ÂæàÂ•ΩÂêÉ at a time! üçö",
  "Your tones are less flat than your humor! üéµ",
  "This character is easier than using chopsticks! ü•¢",
  "Your brain cells having a Chinese party! üéâ",
  "Soon you'll impress your grandma! Â•∂Â•∂‰ºöÈ™ÑÂÇ≤! üëµ",
  "Less Êàë‰∏çÁü•ÈÅì, more ÊàëÊòéÁôΩ! üí™",
  "Your pinyin is almost as good as your ex's! üíî",
  "Learning Chinese: cheaper than therapy! üõãÔ∏è",
  "Your future dating profile: 'Bilingual' üíò",
  "This character is your new BFF! ÊúãÂèã! üëØ",
  "Making Google Translate jealous! ü§ñüíö",
  "Your brain after Chinese: üß† -> üß†üí•",
  "Soon you'll understand wuxia dramas! ü•ã",
  "Less confused tourist, more local expert! üßê",
  "Your pinyin is smoother than your pickup lines! üòè",
  "This word is your ticket to street food heaven! üç¢"
];

// üî• GESTION DES √âCRANS
function showScreen(screenId) {
  document.querySelectorAll('.screen').forEach(screen => {
    screen.classList.remove('active');
  });
  document.getElementById(screenId).classList.add('active');
}

function showInputScreen() {
  showScreen('inputScreen');
  clearStatus();
}

function showExistingWordScreen() {
  showScreen('existingWordScreen');
}

function showNewWordScreen() {
  showScreen('newWordScreen');
}

// üî• FONCTION PRINCIPALE AVEC BOUTON D√âSACTIV√â
async function searchAndAddWord() {
  const chinese = document.getElementById('chinese').value.trim();
  if (!chinese) {
    showStatus('Please enter a Chinese character', 'warning');
    return;
  }

  currentChinese = chinese;
  showStatus('Searching...', 'info');
  
  // V√©rifier que le bouton existe avant de le d√©sactiver
  const addButton = document.querySelector('#inputScreen .btn-light');
  if (!addButton) {
    console.error('‚ùå Bouton non trouv√©');
    return;
  }
  
  disableAddButton();

  try {
    const res = await fetch(`/check-mot/${encodeURIComponent(chinese)}`);
    const data = await res.json();

    if (data.exists) {
      existingWordData = data.mot;
      displayExistingWord(data.mot);
      showExistingWordScreen();
    } else {
      existingWordData = null;
      displayNewWordForm();
      showNewWordScreen();
    }
  } catch (err) {
    showStatus('Error searching database', 'error');
  } finally {
    enableAddButton();
  }
}

// üî• MODIFIE la fonction displayExistingWord
function displayExistingWord(word) {
  document.getElementById('previewChinese').textContent = word.chinese;
  document.getElementById('displayPinyin').textContent = word.pinyin || '-';
  document.getElementById('displayEnglish').textContent = word.english || '-';
  document.getElementById('displayDescription').textContent = word.description || '-';
  
  // V√©rifier si le mot est d√©j√† dans la collection utilisateur
  checkIfWordAlreadyCaptured(word.chinese);
}

// üî• NOUVELLE FONCTION : V√©rifier si le mot est d√©j√† captur√©
async function checkIfWordAlreadyCaptured(chineseWord) {
  try {
    console.log('üîç V√©rification du mot:', chineseWord);
    
    // Version simple sans retry
    const response = await fetch(`/check-user-word/${encodeURIComponent(chineseWord)}`);
    
    if (!response.ok) {
      // Si erreur, on consid√®re que le mot n'est pas captur√©
      console.warn('‚ö†Ô∏è Erreur API, bouton activ√©');
      setConfirmButtonState(false);
      return;
    }
    
    const data = await response.json();
    console.log('‚úÖ R√©ponse serveur:', data);
    setConfirmButtonState(data.alreadyExists);
    
  } catch (error) {
    console.warn('‚ö†Ô∏è Erreur fetch, bouton activ√©:', error.message);
    setConfirmButtonState(false);
  }
}

function setConfirmButtonState(alreadyCaptured) {
  const confirmBtn = document.getElementById('confirmAddBtn');
  if (!confirmBtn) {
    console.error('‚ùå Bouton confirmAddBtn non trouv√©');
    return;
  }
  
  console.log('üéØ Changement √©tat bouton:', alreadyCaptured);
  
  if (alreadyCaptured) {
    confirmBtn.disabled = true;
    confirmBtn.innerHTML = '<i class="bi bi-check2-circle me-2"></i>You already captured this word';
    confirmBtn.classList.remove('btn-success');
    confirmBtn.classList.add('btn-secondary');
  } else {
    confirmBtn.disabled = false;
    confirmBtn.innerHTML = '<i class="bi bi-check-lg me-2"></i>Confirm & Add';
    confirmBtn.classList.remove('btn-secondary');
    confirmBtn.classList.add('btn-success');
  }
}

// üî• AFFICHE LE FORMULAIRE NOUVEAU MOT
function displayNewWordForm() {
  document.getElementById('newPreviewChinese').textContent = currentChinese;
  document.getElementById('newPinyin').value = '';
  document.getElementById('newEnglish').value = '';
  document.getElementById('newDescription').value = '';
}

// üî• CONFIRME L'AJOUT D'UN MOT EXISTANT
async function confirmAddExistingWord() {
  if (!existingWordData) return;

  try {
    const res = await fetch('/ajouter', {
      method: 'POST',
      headers: {'Content-Type':'application/json'},
      body: JSON.stringify(existingWordData)
    });
    const data = await res.json();

    if (data.success) {
      showStatus('‚úÖ Word added!', 'success');
      setTimeout(resetForm, 1000);
    } else {
      showStatus(`‚ùå ${data.message}`, 'error');
    }
  } catch(err) {
    showStatus('‚ùå Server error', 'error');
  }
}

// üî• CONFIRME L'AJOUT D'UN NOUVEAU MOT
async function confirmAddNewWord() {
  const pinyin = document.getElementById('newPinyin').value.trim();
  const english = document.getElementById('newEnglish').value.trim();
  const description = document.getElementById('newDescription').value.trim();

  if (!english) {
    showStatus('English translation required', 'warning');
    return;
  }

  const payload = {
    chinese: currentChinese,
    pinyin: pinyin,
    english: english,
    description: description
  };

  try {
    const res = await fetch('/ajouter', {
      method: 'POST',
      headers: {'Content-Type':'application/json'},
      body: JSON.stringify(payload)
    });
    const data = await res.json();

    if (data.success) {
      showStatus('‚úÖ Word added!', 'success');
      setTimeout(resetForm, 1000);
    } else {
      showStatus(`‚ùå ${data.message}`, 'error');
    }
  } catch(err) {
    showStatus('‚ùå Server error', 'error');
  }
}

// üî• R√âINITIALISE LE FORMULAIRE
function resetForm() {
  document.getElementById('chinese').value = '';
  showInputScreen();
  currentChinese = '';
  existingWordData = null;
  clearStatus();
  enableAddButton(); // üî• S'ASSURER QUE LE BOUTON EST R√âACTIV√â
}

// üî• GESTION DES MESSAGES
function showStatus(message, type) {
  const messageDiv = document.getElementById('statusMessage');
  messageDiv.textContent = message;
  messageDiv.className = 'status-message text-center fw-bold';
  
  switch(type) {
    case 'success': messageDiv.classList.add('text-success'); break;
    case 'error': messageDiv.classList.add('text-danger'); break;
    case 'warning': messageDiv.classList.add('text-warning'); break;
    case 'info': messageDiv.classList.add('text-info'); break;
  }
}

function clearStatus() {
  document.getElementById('statusMessage').textContent = '';
  document.getElementById('statusMessage').className = 'status-message';
}

// üî• RECHERCHE AVEC ENTREE
document.getElementById('chinese').addEventListener('keypress', function(e) {
  if (e.key === 'Enter') {
    e.preventDefault();
    searchAndAddWord();
  }
});

// Navigation
function setActiveNavItem() {
  const path = window.location.pathname;
  document.querySelectorAll('.nav-link').forEach(link => {
    link.classList.remove('active');
    const dataPage = link.getAttribute('data-page');
    const href = link.getAttribute('href');
    if ((dataPage && path.includes(dataPage)) || (href && path === href)) {
      link.classList.add('active');
    }
  });
}

// üî• FONCTIONS ROBUSTES POUR LE BOUTON
function disableAddButton() {
  const addButton = document.querySelector('#inputScreen .btn-light');
  if (!addButton) {
    console.warn('‚ö†Ô∏è Bouton non trouv√© pour d√©sactivation');
    return;
  }
  addButton.disabled = true;
  addButton.innerHTML = '<i class="bi bi-hourglass-split me-2"></i>Searching...';
  addButton.classList.add('disabled');
}

function enableAddButton() {
  const addButton = document.querySelector('#inputScreen .btn-light');
  if (!addButton) {
    console.warn('‚ö†Ô∏è Bouton non trouv√© pour activation');
    return;
  }
  addButton.disabled = false;
  addButton.innerHTML = '<i class="bi bi-search me-2"></i>Add the Word';
  addButton.classList.remove('disabled');
}

// üî• FONCTION BULLES - PART DE LA BORDURE
function createBubble(event) {
  const button = event.currentTarget;
  const buttonRect = button.getBoundingClientRect();
  const bubbleCount = 4;
  
  for (let i = 0; i < bubbleCount; i++) {
    setTimeout(() => {
      const bubble = document.createElement('img');
      bubble.src = '/icons/icon-192.png';
      bubble.className = 'bubble';
      
      // Position de d√©part SUR LA BORDURE du bouton
      const edge = Math.floor(Math.random() * 4); // 0=haut, 1=droite, 2=bas, 3=gauche
      let startX, startY;
      
      switch(edge) {
        case 0: // Haut
          startX = buttonRect.left + Math.random() * buttonRect.width;
          startY = buttonRect.top - 5;
          break;
        case 1: // Droite
          startX = buttonRect.right + 5;
          startY = buttonRect.top + Math.random() * buttonRect.height;
          break;
        case 2: // Bas
          startX = buttonRect.left + Math.random() * buttonRect.width;
          startY = buttonRect.bottom + 5;
          break;
        case 3: // Gauche
          startX = buttonRect.left - 5;
          startY = buttonRect.top + Math.random() * buttonRect.height;
          break;
      }
      
      bubble.style.left = (startX - 15) + 'px'; // -15 pour centrer (30px/2)
      bubble.style.top = (startY - 15) + 'px';
      
      // Animation al√©atoire
      const randomAnim = Math.floor(Math.random() * 5) + 1;
      bubble.classList.add(`bubble-${randomAnim}`);
      
      // Taille l√©g√®rement al√©atoire
      const randomSize = 0.8 + Math.random() * 0.4;
      bubble.style.width = (30 * randomSize) + 'px';
      bubble.style.height = (30 * randomSize) + 'px';
      
      document.body.appendChild(bubble);
      
      // Supprimer apr√®s animation
      setTimeout(() => {
        if (bubble.parentNode) {
          bubble.parentNode.removeChild(bubble);
        }
      }, 2200);
      
    }, i * 150); // D√©calage entre les bulles
  }
}

// üî• VALIDATION CORRIG√âE DES CARACT√àRES CHINOIS
function validateChineseInput(input) {
  const errorDiv = document.getElementById('chineseError');
  const value = input.value;
  
  if (!value) {
    errorDiv.style.display = 'none';
    input.style.borderColor = 'white';
    return;
  }
  
  // Expression r√©guli√®re pour les caract√®res NON chinois
  const nonChineseRegex = /[^\u4e00-\u9fff]/g;
  
  // Trouver tous les caract√®res NON chinois
  const nonChineseChars = value.match(nonChineseRegex);
  
  if (nonChineseChars && nonChineseChars.length > 0) {
    // Afficher l'erreur avec les mauvais caract√®res
    const uniqueBadChars = [...new Set(nonChineseChars)]; // √âviter les doublons
    errorDiv.textContent = `Only Chinese characters please! Invalid: ${uniqueBadChars.join(', ')}`;
    errorDiv.style.display = 'block';
    input.style.borderColor = '#dc3545';
  } else {
    // Tout est bon - que des caract√®res chinois
    errorDiv.style.display = 'none';
    input.style.borderColor = '#198754'; // Vert pour "tout bon"
  }
}

// üî• EMP√äCHER LES CARACT√àRES NON-CHINOIS
function setupChineseInputValidation() {
  const chineseInput = document.getElementById('chinese');
  
  chineseInput.addEventListener('beforeinput', (e) => {
    // Bloquer la saisie si ce n'est pas un caract√®re chinois
    if (e.data && !/[\u4e00-\u9fff]/.test(e.data)) {
      e.preventDefault();
      showTemporaryError("Only Chinese characters please!");
    }
  });
  
  chineseInput.addEventListener('paste', (e) => {
    // V√©rifier le contenu coll√©
    const pastedText = e.clipboardData.getData('text');
    const nonChineseChars = pastedText.split('').filter(char => !/[\u4e00-\u9fff]/.test(char));
    
    if (nonChineseChars.length > 0) {
      e.preventDefault();
      showTemporaryError("Please paste only Chinese characters!");
    }
  });
}

function showTemporaryError(message) {
  const errorDiv = document.getElementById('chineseError');
  errorDiv.textContent = message;
  errorDiv.style.display = 'block';
  
  setTimeout(() => {
    errorDiv.style.display = 'none';
  }, 3000);
}

// üî• INITIALISATION CORRECTE
document.addEventListener('DOMContentLoaded', function() {
  setActiveNavItem();
  displayRandomQuote(); // Afficher une phrase al√©atoire
  setupChineseInputValidation(); // Activer la validation
  
  // üî• FORCER L'AFFICHAGE DE LA PREMI√àRE PHRASE
  console.log('üîÑ Initialisation phrases de motivation');
});

// üî• FONCTION PHRASES DE MOTIVATION (version corrig√©e)
function displayRandomQuote() {
  const quoteElement = document.getElementById('motivationQuote');
  if (!quoteElement) {
    console.error('‚ùå Element motivationQuote non trouv√©');
    return;
  }
  
  const randomIndex = Math.floor(Math.random() * motivationQuotes.length);
  const selectedQuote = motivationQuotes[randomIndex];
  
  console.log('üí¨ Phrase s√©lectionn√©e:', selectedQuote);
  quoteElement.textContent = selectedQuote;
  quoteElement.style.display = 'block';
}


</script>
</body>
</html>