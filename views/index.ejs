<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Âä†Ê≤πÔºÅ - Connexion</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" />
  
  <!-- PWA -->
  <link rel="manifest" href="/manifest.json">
  <meta name="theme-color" content="#0d6efd"/>
  <link rel="apple-touch-icon" href="/icons/icon-192.png">
  
  <!-- Google One Tap -->
  <script src="https://accounts.google.com/gsi/client" async defer></script>
</head>
<body class="bg-light d-flex align-items-center justify-content-center vh-100">
  <div class="container text-center">
    <div class="card shadow p-4" style="max-width: 400px; margin: auto;">
      <h1 class="mb-3">Âä†Ê≤πÔºÅ</h1>
      <p class="text-muted mb-4">Apprends et r√©vise ton vocabulaire chinois facilement.</p>

      <!-- Google One Tap AM√âLIOR√â -->
      <div id="g_id_onload"
           data-client_id="<%= process.env.GOOGLE_CLIENT_ID %>"
           data-context="signin"
           data-ux_mode="popup"
           data-callback="handleGoogleSignIn"
           data-auto_prompt="true"
           data-cancel_on_tap_outside="false"
           data-itp_support="true"> <!-- Support am√©lior√© pour Safari -->
      </div>

      <div class="g_id_signin" 
           data-type="standard"
           data-size="large" 
           data-theme="outline" 
           data-text="signin_with" 
           data-shape="rectangular" 
           data-logo_alignment="left"
           data-width="350">
      </div>

      <!-- Fallback am√©lior√© -->
      <div id="fallback-auth" class="mt-3" style="display: none;">
        <button onclick="initiateManualAuth()" class="btn btn-outline-primary w-100">
          <i class="bi bi-google me-2"></i>Se connecter avec Google
        </button>
        <p class="text-muted small mt-2">
          M√©thode alternative plus stable
        </p>
      </div>

      <!-- √âtat de connexion -->
      <div id="connection-status" class="mt-3" style="display: none;">
        <div class="alert alert-info">
          <i class="bi bi-info-circle me-2"></i>
          <span id="status-message">Connexion en cours...</span>
        </div>
      </div>

      <div class="mt-3">
        <small class="text-muted">En te connectant, tu acceptes nos conditions d'utilisation</small>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
  <script src="/js/global.js"></script>
  <script>
    // Variables globales pour la gestion de connexion
    let authRetryCount = 0;
    const MAX_RETRIES = 3;
    let isAuthenticating = false;

    // Service Worker pour PWA
    if ('serviceWorker' in navigator) {
      navigator.serviceWorker.register('/sw.js')
        .then(registration => {
          console.log('‚úÖ Service Worker enregistr√©');
        })
        .catch(err => {
          console.warn('‚ö†Ô∏è Service Worker non disponible');
        });
    }

    // üî• GESTION AM√âLIOR√âE DU ONE TAP
    function handleGoogleSignIn(response) {
      if (isAuthenticating) {
        console.log('üîÅ Authentification d√©j√† en cours...');
        return;
      }

      isAuthenticating = true;
      showStatus('Connexion en cours...', 'info');
      
      console.log('üîê Tentative de connexion Google One Tap');

      // Tentative avec timeout
      const authPromise = fetch('/auth/google/one-tap', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ credential: response.credential }),
        // Ajout important : inclure les credentials
        credentials: 'same-origin'
      });

      // Timeout de s√©curit√©
      const timeoutPromise = new Promise((_, reject) => 
        setTimeout(() => reject(new Error('Timeout')), 10000)
      );

      Promise.race([authPromise, timeoutPromise])
        .then(res => {
          if (!res.ok) throw new Error(`HTTP ${res.status}`);
          return res.json();
        })
        .then(data => {
          if (data.success) {
            console.log('‚úÖ Connexion r√©ussie, redirection vers:', data.redirect);
            
            // Forcer le rechargement complet
            window.location.replace(data.redirect || '/dashboard');
          } else {
            throw new Error(data.error || 'Erreur inconnue');
          }
        })
        .catch(err => {
          console.error('‚ùå Erreur connexion:', err);
          handleAuthError(err);
        })
        .finally(() => {
          isAuthenticating = false;
        });
    }

    // üî• GESTION ROBUSTE DES ERREURS
    function handleAuthError(error) {
      authRetryCount++;
      
      let message = 'Erreur de connexion';
      
      if (error.message.includes('Timeout')) {
        message = 'Temps de connexion d√©pass√©';
      } else if (error.message.includes('network') || !navigator.onLine) {
        message = 'Probl√®me de r√©seau';
      } else {
        message = 'Service temporairement indisponible';
      }

      showStatus(`${message} (${authRetryCount}/${MAX_RETRIES})`, 'warning');

      if (authRetryCount < MAX_RETRIES) {
        setTimeout(() => {
          showStatus('Nouvelle tentative...', 'info');
          // R√©initialiser One Tap
          if (window.google && window.google.accounts) {
            window.google.accounts.id.prompt();
          }
        }, 2000);
      } else {
        showFallbackAuth();
      }
    }

    // üî• AUTHENTIFICATION MANUELLE ALTERNATIVE
    function initiateManualAuth() {
      showStatus('Redirection vers Google...', 'info');
      
      // Utiliser l'URL classique OAuth2 (plus stable)
      window.location.href = '/auth/google?fallback=true';
    }

    // üî• FALLBACK AUTOMATIQUE
    function showFallbackAuth() {
      document.getElementById('fallback-auth').style.display = 'block';
      showStatus('Utilisez la m√©thode alternative', 'warning');
    }

    function showStatus(message, type) {
      const statusDiv = document.getElementById('connection-status');
      const messageSpan = document.getElementById('status-message');
      
      if (statusDiv && messageSpan) {
        statusDiv.style.display = 'block';
        messageSpan.textContent = message;
        
        // Mise √† jour des classes Bootstrap
        statusDiv.className = 'mt-3 alert alert-' + 
          (type === 'success' ? 'success' : 
           type === 'warning' ? 'warning' : 
           type === 'error' ? 'danger' : 'info');
      }
    }

    // üî• D√âTECTION DE CONNEXION R√âSEAU
    window.addEventListener('online', () => {
      console.log('üåê Connexion r√©tablie');
      showStatus('Connexion r√©tablie', 'success');
      setTimeout(() => {
        document.getElementById('connection-status').style.display = 'none';
      }, 3000);
    });

    window.addEventListener('offline', () => {
      console.log('üìµ Hors ligne');
      showStatus('Vous √™tes hors ligne', 'warning');
    });

    // üî• FALLBACK SI GOOGLE ONE TAP NE CHARGE PAS
    setTimeout(() => {
      if (!window.google) {
        console.warn('‚ö†Ô∏è Google One Tap non charg√©');
        showFallbackAuth();
      }
    }, 5000);

    // üî• RE-INITIALISATION PERIODIQUE POUR CONNEXIONS INSTABLES
    setInterval(() => {
      if (!isAuthenticating && window.google && window.google.accounts) {
        // V√©rifier si l'utilisateur est toujours sur la page de login
        if (window.location.pathname === '/login' || window.location.pathname === '/') {
          console.log('üîÑ R√©initialisation One Tap');
          window.google.accounts.id.prompt();
        }
      }
    }, 30000); // Toutes les 30 secondes

    // D√©tection PWA pour optimisation
    if (window.matchMedia('(display-mode: standalone)').matches) {
      console.log('üì± Mode PWA d√©tect√© - optimisation connexion');
      // En PWA, on peut √™tre plus agressif sur les reconnexions
    }
  </script>
</body>
</html>