<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Âä†Ê≤πÔºÅ - Connexion</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" />
  
  <!-- PWA -->
  <link rel="manifest" href="/manifest.json">
  <meta name="theme-color" content="#0d6efd"/>
  <link rel="apple-touch-icon" href="/icons/icon-192.png">
  
  <!-- Google One Tap -->
  <script src="https://accounts.google.com/gsi/client" async defer></script>
  
  <style>
    .login-container {
      min-height: 100vh;
      background-color: #f8f9fa;
    }
    .login-card {
      border: none;
      border-radius: 12px;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    }
    .btn-social {
      padding: 14px 20px;
      font-weight: 500;
      border: 1px solid #dee2e6;
      transition: all 0.2s ease;
      height: 54px;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    .btn-social:hover {
      background-color: #0d6efd;
      border-color: #adb5bd;
    }
    .btn-facebook {
      background-color: #f8f9fa;
      color: #6c757d;
      cursor: not-allowed;
      opacity: 0.7;
    }
    .app-title {
      font-size: 3rem;
      font-weight: bold;
      color: #0d6efd;
      margin-bottom: 0.5rem;
    }
    .divider {
      display: flex;
      align-items: center;
      margin: 2rem 0;
    }
    .divider::before,
    .divider::after {
      content: "";
      flex: 1;
      border-bottom: 1px solid #dee2e6;
    }
    .divider-text {
      padding: 0 1rem;
      color: #6c757d;
      font-size: 0.875rem;
      background: white;
    }
    .social-icon {
      width: 20px;
      margin-right: 12px;
    }
    @media (max-width: 576px) {
      .login-card {
        margin: 1rem;
        padding: 2rem 1.5rem !important;
      }
      .app-title {
        font-size: 2.5rem;
      }
      .btn-social {
        padding: 12px 16px;
        height: 50px;
      }
    }
  </style>
</head>
<body>
  <div class="login-container d-flex align-items-center justify-content-center py-4">
    <div class="container">
      <div class="row justify-content-center">
        <div class="col-12 col-md-8 col-lg-6 col-xl-5">
          <div class="card login-card p-4 p-md-5">
            <!-- En-t√™te -->
            <div class="text-center mb-4">
              <h1 class="app-title">Âä†Ê≤π!</h1>
              <p class="text-muted mb-0">Learn chinese in the real world. Collect your words, test yourself, challenge your friends and much more.</p>
            </div>

            <!-- Boutons de connexion -->
            <div class="d-grid gap-3">
              <!-- Bouton Google -->
              <button onclick="initiateManualAuth()" class="btn btn-social btn-outline-primary d-flex align-items-center justify-content-center">
                <i class="bi bi-google social-icon"></i>
                <span>Se connecter avec Google</span>
              </button>

              <!-- Bouton Facebook (d√©sactiv√©) -->
              <button class="btn btn-social btn-facebook d-flex align-items-center justify-content-center" disabled>
                <i class="bi bi-facebook social-icon"></i>
                <span>Se connecter avec Facebook</span>
                <small class="badge bg-secondary ms-2">Bient√¥t</small>
              </button>
            </div>

            <!-- Google One Tap (cach√© - utilis√© en arri√®re-plan) -->
            <div class="d-none">
              <div id="g_id_onload"
                   data-client_id="<%= process.env.GOOGLE_CLIENT_ID %>"
                   data-context="signin"
                   data-ux_mode="popup"
                   data-callback="handleGoogleSignIn"
                   data-auto_prompt="true"
                   data-cancel_on_tap_outside="false"
                   data-itp_support="true">
              </div>
            </div>

            <!-- Fallback am√©lior√© (cach√© par d√©faut) -->
            <div id="fallback-auth" class="mt-3" style="display: none;">
              <div class="alert alert-warning mb-3">
                <i class="bi bi-exclamation-triangle me-2"></i>
                <span>M√©thode alternative plus stable</span>
              </div>
            </div>

            <!-- √âtat de connexion -->
            <div id="connection-status" class="mt-3" style="display: none;">
              <div class="alert alert-info d-flex align-items-center">
                <div class="spinner-border spinner-border-sm me-2" role="status"></div>
                <span id="status-message">Connexion en cours...</span>
              </div>
            </div>

            <!-- Footer -->
            <div class="text-center mt-4 pt-3 border-top">
              <small class="text-muted">
                En te connectant, tu acceptes nos 
                <a href="#" class="text-decoration-none">conditions d'utilisation</a>
              </small>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
  <script src="/js/global.js"></script>
  <script>
    // Variables globales pour la gestion de connexion
    let authRetryCount = 0;
    const MAX_RETRIES = 3;
    let isAuthenticating = false;

    // Service Worker pour PWA
    if ('serviceWorker' in navigator) {
      navigator.serviceWorker.register('/sw.js')
        .then(registration => {
          console.log('‚úÖ Service Worker enregistr√©');
        })
        .catch(err => {
          console.warn('‚ö†Ô∏è Service Worker non disponible');
        });
    }

    // üî• GESTION AM√âLIOR√âE DU ONE TAP
    function handleGoogleSignIn(response) {
      if (isAuthenticating) {
        console.log('üîÅ Authentification d√©j√† en cours...');
        return;
      }

      isAuthenticating = true;
      showStatus('Connexion en cours...', 'info');
      
      console.log('üîê Tentative de connexion Google One Tap');

      // Tentative avec timeout
      const authPromise = fetch('/auth/google/one-tap', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ credential: response.credential }),
        credentials: 'same-origin'
      });

      // Timeout de s√©curit√©
      const timeoutPromise = new Promise((_, reject) => 
        setTimeout(() => reject(new Error('Timeout')), 10000)
      );

      Promise.race([authPromise, timeoutPromise])
        .then(res => {
          if (!res.ok) throw new Error(`HTTP ${res.status}`);
          return res.json();
        })
        .then(data => {
          if (data.success) {
            console.log('‚úÖ Connexion r√©ussie, redirection vers:', data.redirect);
            showStatus('Connexion r√©ussie ! Redirection...', 'success');
            
            // Petit d√©lai pour voir le message de succ√®s
            setTimeout(() => {
              window.location.replace(data.redirect || '/dashboard');
            }, 1000);
          } else {
            throw new Error(data.error || 'Erreur inconnue');
          }
        })
        .catch(err => {
          console.error('‚ùå Erreur connexion:', err);
          handleAuthError(err);
        })
        .finally(() => {
          isAuthenticating = false;
        });
    }

    // üî• GESTION ROBUSTE DES ERREURS
    function handleAuthError(error) {
      authRetryCount++;
      
      let message = 'Erreur de connexion';
      
      if (error.message.includes('Timeout')) {
        message = 'Temps de connexion d√©pass√©';
      } else if (error.message.includes('network') || !navigator.onLine) {
        message = 'Probl√®me de r√©seau';
      } else {
        message = 'Service temporairement indisponible';
      }

      showStatus(`${message} (${authRetryCount}/${MAX_RETRIES})`, 'warning');

      if (authRetryCount < MAX_RETRIES) {
        setTimeout(() => {
          showStatus('Nouvelle tentative...', 'info');
          // R√©initialiser One Tap
          if (window.google && window.google.accounts) {
            window.google.accounts.id.prompt();
          }
        }, 2000);
      } else {
        showFallbackAuth();
      }
    }

    // üî• AUTHENTIFICATION MANUELLE ALTERNATIVE
    function initiateManualAuth() {
      showStatus('Redirection vers Google...', 'info');
      
      // Utiliser l'URL classique OAuth2 (plus stable)
      window.location.href = '/auth/google?fallback=true';
    }

    // üî• FALLBACK AUTOMATIQUE
    function showFallbackAuth() {
      document.getElementById('fallback-auth').style.display = 'block';
      showStatus('Utilisez la m√©thode alternative', 'warning');
    }

    function showStatus(message, type) {
      const statusDiv = document.getElementById('connection-status');
      const messageSpan = document.getElementById('status-message');
      
      if (statusDiv && messageSpan) {
        statusDiv.style.display = 'block';
        messageSpan.textContent = message;
        
        // Mise √† jour des classes Bootstrap
        const alertClass = type === 'success' ? 'alert-success' : 
                          type === 'warning' ? 'alert-warning' : 
                          type === 'error' ? 'alert-danger' : 'alert-info';
        
        statusDiv.querySelector('.alert').className = `alert ${alertClass} d-flex align-items-center`;
      }
    }

    // üî• D√âTECTION DE CONNEXION R√âSEAU
    window.addEventListener('online', () => {
      console.log('üåê Connexion r√©tablie');
      showStatus('Connexion r√©tablie', 'success');
      setTimeout(() => {
        document.getElementById('connection-status').style.display = 'none';
      }, 3000);
    });

    window.addEventListener('offline', () => {
      console.log('üìµ Hors ligne');
      showStatus('Vous √™tes hors ligne', 'warning');
    });

    // üî• FALLBACK SI GOOGLE ONE TAP NE CHARGE PAS
    setTimeout(() => {
      if (!window.google) {
        console.warn('‚ö†Ô∏è Google One Tap non charg√©');
      }
    }, 5000);

    // üî• RE-INITIALISATION PERIODIQUE POUR CONNEXIONS INSTABLES
    setInterval(() => {
      if (!isAuthenticating && window.google && window.google.accounts) {
        // V√©rifier si l'utilisateur est toujours sur la page de login
        if (window.location.pathname === '/login' || window.location.pathname === '/') {
          console.log('üîÑ R√©initialisation One Tap');
          window.google.accounts.id.prompt();
        }
      }
    }, 30000);

    // D√©tection PWA pour optimisation
    if (window.matchMedia('(display-mode: standalone').matches) {
      console.log('üì± Mode PWA d√©tect√© - optimisation connexion');
    }

    // Ajustement responsive pour les tr√®s petits √©crans
    function adjustForSmallScreens() {
      if (window.innerWidth < 400) {
        document.querySelector('.login-card').classList.add('p-3');
      }
    }

    window.addEventListener('resize', adjustForSmallScreens);
    adjustForSmallScreens();
  </script>
</body>
</html>